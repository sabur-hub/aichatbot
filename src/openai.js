import { Configuration, OpenAIApi } from 'openai'
import config from 'config'
import fs, { createReadStream } from 'fs'
import postgres from 'postgres'

import axios from 'axios'
import { code } from "telegraf/format";
import { Markup, Telegraf } from "telegraf";
import { message } from "telegraf/filters";
const bot = new Telegraf(config.get('TELEGRAM_TOKEN'))

const client = postgres('postgres://ksepissj:M8KoCbUXeX5NRLIJqvJ-WTJssfWVZvVH@mahmud.db.elephantsql.com/ksepissj',{
    host: "mahmud.db.elephantsql.com",
    port: 5432,
    database: "ksepissj",
    user: "ksepissj",
    password: "M8KoCbUXeX5NRLIJqvJ-WTJssfWVZvVH",
})

await client`
          CREATE TABLE IF NOT EXISTS usersAiBot(
          id serial PRIMARY KEY,
          user_id bigint,
          date_buy TIMESTAMP,
          date_ending TIMESTAMP,
          count_tokens int,
          count_queries int,
          tarif_plan text
          )
        `

export let UserDialogues = {};
export async function chatGen(ctx, textt) {
    try {
        const userId = ctx.from.id;
        const userMessage = textt;

        const userDialogue = UserDialogues[userId] || [];

        const messages = userDialogue.concat([{ role: "user", content: userMessage }]);

        const response = await openaii.createChatCompletion({
            model: 'gpt-3.5-turbo',
            messages: messages,
        });

        const modelReply = response.data.choices[0].message.content;
        ctx.reply(modelReply);
        UserDialogues[userId] = messages.concat([{ role: 'assistant', content: modelReply }]);
    } catch (e) {
        console.log('Error while gpt chat', e.message)
    }
}

export async function transcription(filepath) {
    try {

        const response = await openaii.createTranscription(
            createReadStream(filepath),
            'whisper-1'
        )
        return response.data.text
    } catch (e) {
        console.log('Error while transcription', e.message)
    }
}

export async function generateIamge(message) {
    try {
        const prompt = message
        const configuration = new Configuration({
            apiKey: config.get('OPENAI_KEY')
        });

        const openai = new OpenAIApi(configuration);

        const response = await openai.createImage({
            prompt: prompt,
            n: 4,
            size: "1024x1024",
        });
        return response.data.data;
    } catch (e) {
        console.log("error!")
    }
}

export const INITIAL_SESSION = {
    messages: [],
}
export async function initCommand(ctx) {
    const photoPath = './main.png';

    ///add to db
    try {
        const data = await client`SELECT COUNT(*) FROM usersAiBot where user_id = ${ctx.message.from.id}`
        if(data[0]["count"] == 0){
            const currentDate = new Date(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            const endingDate = new Date(currentDate.getTime() + (2 * 24 * 60 * 60 * 1000)); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ + 30 –¥–Ω–µ–π
            const formattedEndingDate = endingDate;
            const values_now = [currentDate]
            const values_end = [formattedEndingDate]

            await client`INSERT INTO usersAiBot ${ client([{ user_id: ctx.message.from.id, date_buy: values_now, date_ending: values_end, count_tokens: 25000, count_queries: 3, tarif_plan: "DEMO"}]) }`
        }
    }catch (e){
        console.log("Error DB!")
    }

    try {
        await ctx.replyWithPhoto({ source: fs.createReadStream(photoPath) });
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n' +
            'NeuroBot - –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Ä–µ—à–∏—Ç—å –∫—É—á—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n' +
            '‚Äî –ü—Ä–∏–¥—É–º–∞–µ—Ç –∑–∞ –≤–∞—Å –ø—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π.\n' +
            '‚Äî –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –¥–∞–∂–µ –Ω–∞ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–µ–µ —á–µ–º Google\n' +
            '‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –≤–Ω–µ—Å—ë—Ç –ø—Ä–∞–≤–∫–∏\n' +
            '‚Äî –î–∞—Å—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∫–∏ –≤ —É—á–µ–±–Ω–∏–∫–µ\n' +
            '‚Äî –°–æ–∑–¥–∞—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n' +
            '\n' +
            '–ò –µ—â—ë —Å–æ—Ç–Ω–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç —Å–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–≥–æ –∑–∞ –º–∏–Ω—É—Ç—Éü§ñ', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT Turbo', callback_data: 'gpt'
                        }
                    ]
                    ,
                    [
                        {
                            text: '–î–ª—è –°—Ç—É–¥–µ–Ω—Ç–æ–≤ / –®–∫–æ–ª—å–Ω–∏–∫–æ–≤', callback_data: 'gpt-photo'
                        }
                    ]
                    ,
                    [
                        {
                            text: '–°–æ–∑–¥–∞—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Midjourney', url: 'https://t.me/YourAiChatbot'
                        }
                    ]
                    ,
                    [
                        {
                            text: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/Outic_03'
                        }
                    ]
                    ,
                    [
                        {
                            text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile'
                        }
                    ]

                ]
            }
        });

        const userId = ctx.from.id;
        if (!UserDialogues[userId]) {
            UserDialogues[userId] = [];
        }
    } catch (e) {
        console.log('Error while sending photo:', e.message);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π callback_query


export async function newChatKer(ctx) {
    const userId = ctx.from.id;
    UserDialogues[userId] = [];
    await ctx.reply('–ù–∞—á–∏–Ω–∞–ª–æ—Å—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!')
}

export const configuration = new Configuration({
    apiKey: config.get('OPENAI_KEY')
});

export const openaii = new OpenAIApi(configuration);
